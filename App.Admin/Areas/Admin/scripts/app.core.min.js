var AppCore = function () {
    //var handleFormSubmit = function() {
    //    var $form = $("form");
    //    if ($form[0] != "undefined") {
    //        $form.on("click", "a:not(.skip)", function (e) { e.preventDefault(); $form.submit() });
    //    }
    //};
    var handleMessage = function (message) {
        bootbox.alert(message);
    };
    var handleBindGrid = function () {
        var $container = $(".app-grid");
        if ($container[0] != undefined) {
            name = $container[0].id
            $that = $container.find(".filter:not(.skip)");
            var $inputs = $that.find(":input[type!=button]"),
                $search = $that.find("a[app-command='search']").click(function () {
                    var $self = $(this),
                        serialize = $self.attr("app-settings-serialize") != undefined,
                        params = {},
                        totalEmpty = 0;
                    $inputs.each(function () {
                        this.value = $.trim(this.value);
                        if (this.value.length == 0) {
                            totalEmpty++;
                        }
                        if (this.id) {
                            if (serialize) {
                                params[this.id] = this.value;
                            }
                            $.cookie(name + this.id, this.value || "", { path: "/" });
                        }
                    });
                    if (totalEmpty == $inputs.length) {
                        handleMessage("Vui lòng chọn tiêu chí tìm kiếm");
                    } else {
                        App.blockUI({
                            target: 'body',
                            boxed: true
                        });
                        var url = $self.attr("dir") || "";
                        if (serialize) {
                            url += (url.indexOf("?") == -1 ? "?" : "&") + $.param(params);
                        }
                        location.assign(url);
                    }
                    return false;
                });
            $inputs.filter(":visible").each(function (k) {
                var value = $.cookie(name + this.id) || "";
                // alert(value);
                $(this).val(value).off("keyup").on("keyup", function (e) {
                    if (e.which == 13) {
                        $search.click();
                    }
                });
                if (this.value && this.type == "text") {
                    $container.find(".highlight" + k + ":contains('" + value.replace(/'/g, "\\'") + "')").each(function () {
                        $that = $(this);
                        eval("$that.html($that.html().replace(/(" + value.replace(/\//g, "\\") + ")/i, '<span class=\"highlight\">$1</span>'));");
                    });
                }
            });
            // quick search in grid with a href =#dropdownlistid, rel = value dropdownlistid
            $container.find("a.term").off("click").on("click", function () {
                $container.find(this.hash).val(this.rel || $(this).text());
                return !$search.click();
            });
        }

    }
    var handleMessageConfirm = function (handler, message) {
        bootbox.confirm(Messages.ConfirmMessage, function (result) {
            if (result == true) {
                if ($.isFunction(handler)) {
                    App.blockUI({
                        target: 'body',
                        boxed: true
                    });
                    handler.call(this);
                } else {
                    location.assign(handler || "");
                }
            }
        });

    }
    var handleReset = function (url) {
        var cookies = document.cookie.split(";");
        for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i]; var eqPos = cookie.indexOf("="); var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
            document.cookie = name + '="";-1; path=/';
        }
        if (typeof url == "string") {
            handleRedirect(url);
            return false;
        }
        return this;
    }
    var handleRedirect = function (url, replacement) {
        //App.blockUI({
        //    target: 'body',
        //    boxed: true
        //});
        location.assign(decodeURIComponent(url || "").replace(/([\/?&]page[\/=])[0-9]+\/?/ig, replacement || "").replace(/#$/g, ""));
        return false;
    };
    var handleCheck = function (element, container) {
        if (typeof element != "object" || element.type != "checkbox") {
            return false;
        }
        if (container == undefined) {
            container = $(element).closest("table");
        } else {
            if (!(container instanceof $)) {
                container = $(container);
            }
        }
        //console.log(container);
        var checkBoxes = container.find(":checkbox"), checkAll = checkBoxes.filter("[value=on],[value='']");
        // console.log(checkAll);
        if (element.checked) {
            if (checkBoxes.length - checkAll.length == checkBoxes.filter(":checked").length) {
                checkAll.prop("checked", true);
            }
        } else {
            checkAll.prop("checked", false);

        }
        $.uniform.update();
        handleCheckIds(container);

    };
    var handleCheckIds = function (container) {
        if (!(container instanceof $)) {
            container = $(container);
        }
        var ids = [];
        if (container[0] != undefined && container[0].id) {
            var checkboxes = container.find(":checkbox:not(.skip):checked");
            checkboxes.each(function () {
                if (this.value != '' && this.value != 'on') {
                    ids.push(this.value);
                }
            })
        }
        //console.log(ids.length);
        //  return { "ids": ids.join(","), "total": ids.length };
        return { "ids": ids.join(","), "total": ids.length };
    }
    var handleNotify = function (message) {
        /// <summary>
        /// Display system message.
        /// </summary>
        /// <param name="message" type="String">The message to be displayed.</param>
        /// <returns>The Cy object.</returns>
        /// <example>
        /// This sample shows how to display system message.
        /// <code>
        /// Cy.notify(); // is same as the following...
        /// Cy.notify($.cookie("system_message") || "The message to be displayed.");
        /// </code>
        /// </example>

        if (_message = $.cookie("system_message") || message) {
            if (_message != 'null') {
                $("#system_message").removeClass("hide").find("span#system_message_content").html(_message);
                $.cookie("system_message", null, { path: "/" });
            }
        }
        delete _message;
        return this;
    };

    var handleSaveAndPrint = function () {


    };
    var handleAppBatch = function (container, url, command) {
        if (!(container instanceof $)) {
            container = $(container);
        }
        console.log(container[0]);
        if (!(container[0].nodeName == "table") || (container[0].nodeName == "div")) {
            container = container.closest(".app-grid");
            var result = handleCheckIds(container);
            // console.log(result);
            if (result.total == 0) {
                handleMessage(Messages.EmptyItem);
            } else if (result.total > 200) {
                handleMessage("Có quá nhiều mục được chọn, vui lòng chỉ chọn dưới 200 mục.");
            } else {
                command = String(command).toLowerCase();
                if (command == "edit") {
                    handleReset(url + "/" + result.ids.split(",")[0]);
                } else {
                    handleMessageConfirm(function () {
                        var ids = result.ids.split(',')
                        $.post(url, { "ids": ids }, function (data) {
                            handleReset();
                            $.cookie("system_message", data || "Quá trình thực hiện xảy ra lỗi, vui lòng thử lại.", { path: "/" });
                            //handleNotify(data);
                            if (location.href.indexOf('#') != -1) {
                                location.reload(true);
                            }
                            else {
                                //$.notific8('zindex', 5500);
                                //$.notific8(data, {
                                //    theme: 'ruby',
                                //    life: 3000
                                //});
                                handleRedirect(location.href);
                            }
                        });
                    }, "Are you sure?.");
                }
            }

        }
    }

    var handleFormApp = function () {
        var $toolbar = $("#toolbar-box");
        $toolbar.find("a:not(.skip)").off("click").on("click", function () {
            var $that = $(this);
            // Thêm attribute "url-decode" phục vụ cho các trang index search sử dụng url param. Khi Search -> Edit -> Return vẫn giữ được các url param
            if ($that.attr("url-decode") == "false") {
                href = $that.attr("href");
            }
            else {
                href = decodeURIComponent($that.attr("href"));
            }
            if ($that.attr("data-command") == "app-save") {
                var $form = $("form[data-container]:first"),
                 action = $form.attr("action").replace(/(returnurl=)[^\?\&]*/i, "$1");
                if ($form.valid()) {
                    App.blockUI({
                        target: 'body',
                        boxed: true
                    });
                    if ($form.data("appSubmit")) {
                        handleMessage("You have already submitted the form.");
                    } else {
                        var returnUrl = $.QueryString["ReturnUrl"];
                        if (href != "undefined") {
                            returnUrl = href;
                        }
                        //if (href != "undefined")
                        //    $form.data("appSubmit", true).attr("action", action +"ReturnUrl=" + encodeURIComponent(href)).submit();
                        //else
                        //    $form.data("appSubmit", true).attr("action", action).submit();'
                        
                        if (action.toLowerCase().indexOf("ReturnUrl=") == -1 && typeof (returnUrl) != "undefined") {
                            action += (action.indexOf("?") == -1 ? "?" : "&") + "ReturnUrl=" + returnUrl;
                        }
                        $form.data("appSubmit", true).attr("action", action).submit();
                    }
                }
            }
            else if ($that.attr("data-command") == "app-batch") {
                var commandname = $that.attr("command-name");
                handleAppBatch("#" + $toolbar.attr("data-container"), href, commandname);
            } else if ($that.attr("data-command") == "app-reset") {
                handleReset(href);
            } else if ($that.attr("data-command") == "app-confirm") {
                handleMessageConfirm(href);
            }
            //else if ($that.attr("data-command") == "app-export") {
            //    handleRedirect(href);
            //}
            return false;
        });
    };

    var handleSearch = function () {
        $("#searchBox").keypress(function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == 13) {
                var url = $(this).attr("dir");
                var keywords = $(this).val();
                App.blockUI({
                    target: "body",
                    boxed: true
                });
                window.location.href = url + "?keywords=" + keywords;
                //if (keywords.length != 0) {

                //}
            }
        });
    }
    return {
        init: function () {
            handleFormApp();
            handleBindGrid();
            handleNotify();
            handleSaveAndPrint();
            //handleCheckAll();
            handleSearch();
        },
        initAjax: function () {

        },
        handleCheckAll: function (element, container) {
            if (typeof element != "object") {
                return false;
            }
            if (typeof container == "undefined") {
                container = $(element).closest("table");
                //console.log(container)
            } else {
                if (!(container instanceof $)) {
                    container = $(container);
                }
            }
            return !container.find(":checkbox:not(.skip)").each(function () {
                var nameStr = $(this).attr('name');
                // console.log(nameStr)
                if (this != element && nameStr == undefined) {
                    this.checked = element.checked || false;
                    handleCheck(this, container);
                }
            });
        },
        handleConfirm: function (handler, message) {
            bootbox.confirm(Messages.ConfirmMessage, function (result) {
                if (result == true) {
                    if ($.isFunction(handler)) {
                        App.blockUI({
                            target: 'body',
                            boxed: true
                        });
                        handler.call(this);
                    } else {
                        location.assign(handler || "");
                    }
                }
            });

        }
    }
}();
$(function () {
    AppCore.init();
})