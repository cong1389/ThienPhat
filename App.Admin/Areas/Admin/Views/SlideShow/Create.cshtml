@using App.Domain.Common
@using App.Framework.Ultis
@using Resources
@model App.FakeEntity.Slide.SlideShowViewModel
@{
    ViewBag.Title = UI.CreateNew;
    ViewBag.Toolbar = new[] { "Save", "SaveNew", "Divider", "Back" };
}
@using (Html.BeginForm("Create", "SlideShow", FormMethod.Post, new { data_container = ViewContext.RouteData.Values["controller"], enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger col-md-offset-3" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control ckeditor", rows=5 })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "help-block" })
                </div>
            </div> 
            <div class="form-group">
                @Html.LabelFor(model => model.OrderDisplay, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.OrderDisplay, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OrderDisplay, "", new { @class = "help-block" })
                </div>
            </div> 
            <div class="form-group">
                @Html.LabelFor(model => model.WebsiteLink, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.WebsiteLink, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.WebsiteLink, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Width, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Width, new { @class = "form-control ckeditor" })
                    @Html.ValidationMessageFor(model => model.Width, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Height, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Height, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Target, new {@class = "control-label col-md-3"})
                <div class="col-md-5">
                    <div class="radio-list">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Target, TypeLink._blank.ToString(), new {@checked = "checked"}) @TypeLink._blank.ToString()
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Target, TypeLink._parent.ToString()) @TypeLink._parent.ToString()
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Target, TypeLink._self.ToString()) @TypeLink._self.ToString()
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Target, TypeLink._top.ToString()) @TypeLink._top.ToString()
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Status, "", new {@class = "help-block"})
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-3">@FormUI.DisplayDate</label>
                <div class="col-md-4">
                    <div class="input-group input-large date-picker input-daterange" data-date-format="mm/dd/yyyy">
                        @Html.TextBoxFor(model => model.FromDate, "{0:MM/dd/yyyy}", new {@class = "form-control"}) 
                        <span class="input-group-addon"> to </span>
                        @Html.TextBoxFor(model => model.ToDate,"{0:MM/dd/yyyy}", new {@class = "form-control"}) 
                    </div>
                    @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "help-block" })
                    @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "help-block" })
                    <!-- /input-group -->
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Video, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.Video, new { @class = "" })
                    </label>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Image, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    <div class="fileinput fileinput-new" data-provides="fileinput">
                        <div class="input-group input-large">
                            <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                                <i class="fa fa-file fileinput-exists"></i>&nbsp;
                                <span class="fileinput-filename"> </span>
                            </div>
                            <span class="input-group-addon btn default btn-file">
                                <span class="fileinput-new">@Resources.FormUI.SelectFile</span>
                                <span class="fileinput-exists"> @Resources.FormUI.ChangeFile </span>
                                @Html.TextBoxFor(model => model.Image, new { @type = "file" })
                                @*<input type="file" name="FileUpload" />*@
                            </span>
                            <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Image, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    <div class="radio-list">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Status, (int)Status.Enable, new { @checked = "checked" }) @UI.Active
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Status, (int)Status.Disable) @UI.InActive
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
}
@section scripts{
    <script src="@Url.FakePathAdmin("scripts/plugins/ckeditor/ckeditor.js")"></script>
    <script src="@Url.FakePathAdmin("scripts/plugins/ckeditor/config.js")"></script>
    <script src="@Url.FakePathAdmin("scripts/plugins/daterangepicker/moment.min.js")"></script> 
    <script src="@Url.FakePathAdmin("scripts/plugins/daterangepicker/daterangepicker.js")"></script> 
    <script src="@Url.FakePathAdmin("scripts/plugins/daterangepicker/bootstrap-datepicker.js")"></script> 
    <script src="@Url.FakePathAdmin("scripts/components-date-time-pickers.js")"></script> 
}
@section style{
    <link href="@Url.FakePathAdmin("content/plugins/daterangepicker/daterangepicker-bs3.css")" rel="stylesheet" />
}

