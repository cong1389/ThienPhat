<!---_CreateOrUpdate--->
@using App.Domain.Common
@using App.Framework.Ultis
@using Resources
@model  App.FakeEntity.Meu.MenuLinkViewModel

<div class="form-horizontal">
    <div class="form-body">
        @Html.ValidationSummary(true, "", new { @class = "text-danger col-md-offset-3" })
        <div class="form-group">
            @Html.LabelFor(model => model.MenuName, new { @class = "control-label col-md-3" })
            <div class="col-md-5">

                @Html.HiddenFor(model => model.LocalizedProperty[0].Id)
                @Html.TextBoxFor(model => model.LocalizedProperty[0].LocaleValue, new { @class = "form-control" })
                @Html.HiddenFor(model => model.LocalizedProperty[0].LanguageId)

                @Html.HiddenFor(model => model.LocalizedProperty[1].Id)
                @Html.TextBoxFor(model => model.LocalizedProperty[1].LocaleValue, new { @class = "form-control" })
                @Html.HiddenFor(model => model.LocalizedProperty[1].LanguageId)

                @Html.HiddenFor(model => model.LocalizedProperty[2].Id)
                @Html.TextBoxFor(model => model.LocalizedProperty[2].LocaleValue, new { @class = "form-control" })
                @Html.HiddenFor(model => model.LocalizedProperty[2].LanguageId)

                @Html.TextBoxFor(model => model.MenuName, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MenuName, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ParentId, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.DropDownListFor(x => x.ParentId, new SelectList(ViewBag.MenuList, "Id", "MenuName"), "--Select--", new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OrderDisplay, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.OrderDisplay, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.OrderDisplay, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SourceLink, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.SourceLink, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SourceLink, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TypeMenu, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="radio-list">
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TypeMenu, (int)TypeMenu.ShowContent) @FormUI.ShowContent
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TypeMenu, (int)TypeMenu.DisplayListItem, new { @checked = "checked" }) @FormUI.DisplayListItem
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.TypeMenu, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TemplateType, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="radio-list">
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.Product) @FormUI.TemplateProduct
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.News) @FormUI.TemplateNews
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.Contact) Contact
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.FixItem) FixItem
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.Accessories) Accessories
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.AboutUs) AboutUs
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.SaleOff) SaleOff
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.TemplateType, (int)TemplateContent.Static) @FormUI.TemplateStatic
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.TemplateType, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DisplayOnHomePage, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.DisplayOnHomePage, new { @class = "" })
                </label>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DisplayOnMenu, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.DisplayOnMenu, new { @class = "" })
                </label>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DisplayOnSearch, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.DisplayOnSearch, new { @class = "" })
                </label>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Position, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="radio-list">
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Position, (int)Position.Top, new { @checked = "checked" }) @Position.Top.ToString()
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Position, (int)Position.TopHead) @Position.TopHead.ToString()
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Position, (int)Position.Footer) @Position.Footer.ToString()
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Position, (int)Position.SiderBar) @Position.SiderBar.ToString()
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Position, (int)Position.Right) @Position.Right.ToString()
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Position, (int)Position.Left) @Position.Left.ToString()
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MetaTitle, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.MetaTitle, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MetaTitle, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MetaKeywords, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.MetaKeywords, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MetaKeywords, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MetaDescription, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.MetaDescription, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Image, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="input-group input-large">
                        <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                            <i class="fa fa-file fileinput-exists"></i>&nbsp;
                            <span class="fileinput-filename"> </span>
                        </div>
                        <span class="input-group-addon btn default btn-file">
                            <span class="fileinput-new">@Resources.FormUI.SelectFile</span>
                            <span class="fileinput-exists"> @Resources.FormUI.ChangeFile </span>
                            @Html.TextBoxFor(model => model.Image, new { @type = "file" })
                            @*<input type="file" name="FileUpload" />*@
                        </span>
                        <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "help-block" })
            </div>
            <div class="col-md-5 col-md-offset-3">
                <img src="@Url.Content("~/" + Model.ImageUrl)" width="80" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ImageIcon1, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="input-group input-large">
                        <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                            <i class="fa fa-file fileinput-exists"></i>&nbsp;
                            <span class="fileinput-filename"> </span>
                        </div>
                        <span class="input-group-addon btn default btn-file">
                            <span class="fileinput-new">@Resources.FormUI.SelectFile</span>
                            <span class="fileinput-exists"> @Resources.FormUI.ChangeFile </span>
                            @Html.TextBoxFor(model => model.ImageIcon1, new { @type = "file" })
                            @*<input type="file" name="FileUpload" />*@
                        </span>
                        <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.ImageIcon1, "", new { @class = "help-block" })
            </div>
            <div class="col-md-5 col-md-offset-3">
                <img src="@Url.Content("~/" + Model.Icon1)" width="80" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ImageIcon2, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="input-group input-large">
                        <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                            <i class="fa fa-file fileinput-exists"></i>&nbsp;
                            <span class="fileinput-filename"> </span>
                        </div>
                        <span class="input-group-addon btn default btn-file">
                            <span class="fileinput-new">@Resources.FormUI.SelectFile</span>
                            <span class="fileinput-exists"> @Resources.FormUI.ChangeFile </span>
                            @Html.TextBoxFor(model => model.ImageIcon2, new { @type = "file" })
                            @*<input type="file" name="FileUpload" />*@
                        </span>
                        <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.ImageIcon2, "", new { @class = "help-block" })
            </div>
            <div class="col-md-5 col-md-offset-3">
                <img src="@Url.Content("~/" + Model.Icon2)" width="80" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="radio-list">
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Status, (int)Status.Enable, new { @checked = "checked" }) @UI.Active
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Status, (int)Status.Disable) @UI.InActive
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<!---/_CreateOrUpdate--->