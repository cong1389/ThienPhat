@using App.Domain.Common
@using Resources
@model App.FakeEntity.ContactInformation.ContactInformationViewModel
@{
    ViewBag.Title = UI.CreateNew;
    ViewBag.Toolbar = new[] { "Save", "SaveNew", "Divider", "Back" };
}
@using (Html.BeginForm("Create", "ContactInfomation", FormMethod.Post, new { data_container = ViewContext.RouteData.Values["controller"], enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger col-md-offset-3" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, new {@class = "control-label col-md-3"})
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Title, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Title, "", new {@class = "help-block"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NumberOfStore, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.NumberOfStore, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.NumberOfStore, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProvinceId, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.DropDownListFor(x => x.ProvinceId, new SelectList(ViewBag.Provinces ?? string.Empty, "Id", "Name"), "--Select--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OrderDisplay, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Email, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Hotline, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Hotline, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Hotline, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MobilePhone, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.MobilePhone, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MobilePhone, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label(FormUI.GoogleMap, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    <a id="mapmarker" class="btn btn-sm btn-primary">@FormUI.SelectMap</a>
                    @Html.HiddenFor(x => x.Lag)
                    @Html.HiddenFor(x => x.Lat)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Fax, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Fax, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Address, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Address, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.OrderDisplay, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.OrderDisplay, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OrderDisplay, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Type, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    <div class="radio-list">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Type, (int)TypeAdress.Current , new {@checked="checked"}) @FormUI.CurrentAddress
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Type, (int)TypeAdress.Other) @FormUI.OtherAddress
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    <div class="radio-list">
                        <label class="radio-inline">
                           @Html.RadioButtonFor(x => x.Status, (int)Status.Enable , new {@checked="checked"}) @UI.Active
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(x => x.Status, (int)Status.Disable) @UI.InActive
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
}
@section scripts{
    <script type="text/javascript">
        $("#mapmarker").on("click", function () {
            window.open("@Url.Action("GoogleMap","Utility")", "_blank", "toolbar=yes,scrollbars=yes, resizable=yes, top=100, left=100, width=1200, height=800");
        });
    </script>
}

